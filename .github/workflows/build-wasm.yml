name: Publish WASM
on:
  push:
    branches:
    - master
    - ci/*
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: '1'

jobs:
  publish_wasm_demo:
    name: Publish WebAssembly Demo
    runs-on: ubuntu-20.04
    # only runs for push, so not for releases.
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/setup-rust-wasm
      - name: Yarn install
        working-directory: crates/wasm/js-demo
        run: yarn install

      - name: >
          Build WASM pkg
          (${{ github.ref == 'refs/heads/master' && '--release' || '--dev' }})
        working-directory: crates/wasm
        run: |
          ./scripts/npm-pkg-config.sh \
            ${{ github.ref != 'refs/heads/master' && '--dev' || '' }} \
            --targets browser \
            --set-name @citeproc-rs/wasm \
            --dest ./pkg \
            --features console,dot

      - run: yarn build
        working-directory: crates/wasm/js-demo

      - name: Deploy
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: peaceiris/actions-gh-pages@v2
        env:
          ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_DIR: ./crates/wasm/js-demo/build
          EXTERNAL_REPOSITORY: cormacrelf/citeproc-wasm-demo
          PUBLISH_BRANCH: gh-pages

  publish_npm:
    name: "Publish to NPM"
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Get version info
        id: version
        run: |
          function set-output() {
            local name="$1"
            local value="$2"
            echo "setting output $name -> $value"
            echo "::set-output name=$name::$value"
          }

          IS_TAGGED_RELEASE=${{ github.event_name == 'release' && 'true' || 'false' }}
          DRY_RUN=${{ github.event_name == 'push' && github.ref != 'refs/heads/master' && 'true' || 'false' }}
          SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")
          set-output short_sha "${SHORT_SHA}"
          set-output npm_dry_run "$DRY_RUN"

          if $IS_TAGGED_RELEASE; then
            TAG=${GITHUB_REF#refs/tags/wasm-}
            IFS='-' read -ra _ POST_HYPHEN <<< "$TAG"
            if [ -n "$POST_HYPHEN" ]; then
              # i.e. there was a -alpha.1 appended, use the `next` dist tag
              set-output npm_dist_tag next
            else
              set-output npm_dist_tag latest
            fi
            set-output npm_version "$TAG"
          else
            set-output npm_version "0.0.0-canary-${SHORT_SHA}"
            set-output npm_dist_tag canary
          fi

      - name: >
          Will execute: ${{ steps.version.outputs.npm_dry_run == 'true' && '[Dry run]' || ''}}
          Publish @citeproc-rs/wasm ${{ steps.version.outputs.npm_version }} to NPM,
          dist tag ${{ steps.version.outputs.npm_dist_tag }}
        run: echo

      - uses: ./.github/actions/setup-rust-wasm

      - name: Build for all targets
        working-directory: crates/wasm
        run: |
          ./scripts/npm-pkg-config.sh --features console

      - name: Configure package for publishing to NPM
        working-directory: crates/wasm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{secrets.NPM_PUBLISH_TOKEN}}" > .npmrc
          ./scripts/npm-pkg-config.sh --package-only --set-version ${{steps.version.outputs.npm_version }}

      - name: Publish @citeproc-rs/wasm to NPM
        working-directory: crates/wasm
        run: >
          npm publish ./dist --access public
          --tag ${{ steps.version.outputs.npm_dist_tag }}
          ${{ steps.version.outputs.npm_dry_run == 'true' && '--dry-run' || '' }}

